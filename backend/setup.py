#!/usr/bin/env python3
"""
Script de setup para o MatchSense AI Backend
Automatiza a instala√ß√£o e configura√ß√£o inicial do sistema
"""

import os
import sys
import subprocess
import importlib.util
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio. Vers√£o atual:", sys.version)
        sys.exit(1)
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")

def install_package(package):
    """Instala um pacote via pip"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        return True
    except subprocess.CalledProcessError:
        return False

def check_and_install_packages():
    """Verifica e instala pacotes necess√°rios"""
    print("\nüì¶ Verificando e instalando depend√™ncias...")
    
    # Lista de pacotes essenciais
    essential_packages = [
        "streamlit",
        "transformers",
        "torch",
        "sentence-transformers",
        "faiss-cpu",
        "numpy",
        "pandas",
        "scikit-learn",
        "nltk",
        "spacy"
    ]
    
    for package in essential_packages:
        print(f"Instalando {package}...")
        if install_package(package):
            print(f"‚úÖ {package} instalado com sucesso")
        else:
            print(f"‚ùå Erro ao instalar {package}")
            return False
    
    return True

def download_spacy_model():
    """Baixa o modelo spaCy para portugu√™s"""
    print("\nüåê Baixando modelo spaCy para portugu√™s...")
    
    try:
        # Tentar baixar o modelo
        subprocess.check_call([
            sys.executable, "-m", "spacy", "download", "pt_core_news_sm"
        ])
        print("‚úÖ Modelo spaCy baixado com sucesso")
        return True
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è Erro ao baixar modelo spaCy. Tentando alternativa...")
        
        try:
            # Tentar modelo alternativo
            subprocess.check_call([
                sys.executable, "-m", "spacy", "download", "en_core_web_sm"
            ])
            print("‚úÖ Modelo alternativo baixado")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå Erro ao baixar modelos spaCy")
            return False

def download_nltk_data():
    """Baixa dados necess√°rios do NLTK"""
    print("\nüìö Baixando dados NLTK...")
    
    try:
        import nltk
        
        # Lista de recursos NLTK necess√°rios
        nltk_resources = ['punkt', 'stopwords', 'averaged_perceptron_tagger']
        
        for resource in nltk_resources:
            try:
                nltk.data.find(f'tokenizers/{resource}')
                print(f"‚úÖ {resource} j√° dispon√≠vel")
            except LookupError:
                print(f"Baixando {resource}...")
                nltk.download(resource, quiet=True)
                print(f"‚úÖ {resource} baixado")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao baixar dados NLTK: {e}")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    directories = [
        "results",
        "exports",
        "uploads",
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio {directory} criado")

def test_installation():
    """Testa se a instala√ß√£o foi bem-sucedida"""
    print("\nüß™ Testando instala√ß√£o...")
    
    try:
        # Testar imports principais
        import streamlit
        import transformers
        import torch
        import sentence_transformers
        import nltk
        import spacy
        
        print("‚úÖ Todos os imports funcionando")
        
        # Testar modelo b√°sico
        from sentence_transformers import SentenceTransformer
        model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
        
        # Teste simples
        sentences = ["Ol√° mundo", "Hello world"]
        embeddings = model.encode(sentences)
        
        print("‚úÖ Modelo de embedding funcionando")
        print("‚úÖ Instala√ß√£o conclu√≠da com sucesso!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def create_sample_files():
    """Cria arquivos de exemplo para teste"""
    print("\nüìÑ Criando arquivos de exemplo...")
    
    # Curr√≠culo de exemplo
    sample_resume = """
Jo√£o Silva Santos
joao.silva@email.com
(11) 99999-9999
S√£o Paulo, SP

RESUMO PROFISSIONAL
Desenvolvedor Full Stack com 5 anos de experi√™ncia em desenvolvimento web, especializado em Python, JavaScript e React.

EXPERI√äNCIA PROFISSIONAL
Desenvolvedor Full Stack S√™nior
TechCorp - S√£o Paulo, SP
2021 - Presente
‚Ä¢ Desenvolvimento de aplica√ß√µes web usando Python (Django), React e PostgreSQL
‚Ä¢ Lideran√ßa t√©cnica de equipe de 4 desenvolvedores

EDUCA√á√ÉO
Bacharelado em Ci√™ncia da Computa√ß√£o
Universidade de S√£o Paulo (USP)
2015 - 2019

HABILIDADES T√âCNICAS
‚Ä¢ Python, JavaScript, TypeScript, React, Django, PostgreSQL
‚Ä¢ AWS, Docker, Git, Jira

IDIOMAS
‚Ä¢ Portugu√™s: Nativo
‚Ä¢ Ingl√™s: Fluente
"""
    
    # Salvar curr√≠culo de exemplo
    with open("sample_resume.txt", "w", encoding="utf-8") as f:
        f.write(sample_resume)
    
    print("‚úÖ Arquivo de exemplo criado: sample_resume.txt")

def main():
    """Fun√ß√£o principal do setup"""
    print("üéØ MatchSense AI - Setup do Backend")
    print("=" * 50)
    
    # Verificar vers√£o do Python
    check_python_version()
    
    # Instalar pacotes
    if not check_and_install_packages():
        print("‚ùå Falha na instala√ß√£o de pacotes")
        sys.exit(1)
    
    # Baixar modelo spaCy
    if not download_spacy_model():
        print("‚ö†Ô∏è Aviso: Modelo spaCy n√£o foi baixado. Algumas funcionalidades podem n√£o funcionar.")
    
    # Baixar dados NLTK
    if not download_nltk_data():
        print("‚ö†Ô∏è Aviso: Dados NLTK n√£o foram baixados. Algumas funcionalidades podem n√£o funcionar.")
    
    # Criar diret√≥rios
    create_directories()
    
    # Criar arquivos de exemplo
    create_sample_files()
    
    # Testar instala√ß√£o
    if test_installation():
        print("\nüéâ Setup conclu√≠do com sucesso!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Execute: streamlit run app.py")
        print("2. Acesse: http://localhost:8501")
        print("3. Use o arquivo sample_resume.txt para testes")
    else:
        print("\n‚ùå Setup falhou. Verifique os erros acima.")
        sys.exit(1)

if __name__ == "__main__":
    main() 