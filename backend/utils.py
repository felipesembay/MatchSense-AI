import json
import os
import pandas as pd
from datetime import datetime
from typing import Dict, List, Any
import logging

logger = logging.getLogger(__name__)

def save_analysis_results(results: Dict[str, Any], filename: str = None) -> str:
    """
    Salva os resultados da an√°lise em arquivo JSON
    
    Args:
        results: Resultados da an√°lise
        filename: Nome do arquivo (opcional)
        
    Returns:
        Caminho do arquivo salvo
    """
    try:
        # Criar diret√≥rio de resultados se n√£o existir
        results_dir = "results"
        if not os.path.exists(results_dir):
            os.makedirs(results_dir)
        
        # Gerar nome do arquivo se n√£o fornecido
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"analysis_results_{timestamp}.json"
        
        filepath = os.path.join(results_dir, filename)
        
        # Salvar resultados
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        logger.info(f"Resultados salvos em: {filepath}")
        return filepath
        
    except Exception as e:
        logger.error(f"Erro ao salvar resultados: {str(e)}")
        raise

def load_analysis_results(filepath: str) -> Dict[str, Any]:
    """
    Carrega resultados de an√°lise de arquivo JSON
    
    Args:
        filepath: Caminho do arquivo
        
    Returns:
        Resultados carregados
    """
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            results = json.load(f)
        
        logger.info(f"Resultados carregados de: {filepath}")
        return results
        
    except Exception as e:
        logger.error(f"Erro ao carregar resultados: {str(e)}")
        raise

def export_to_excel(results: List[Dict[str, Any]], filename: str = None) -> str:
    """
    Exporta resultados para arquivo Excel
    
    Args:
        results: Lista de resultados
        filename: Nome do arquivo (opcional)
        
    Returns:
        Caminho do arquivo salvo
    """
    try:
        # Criar diret√≥rio de exporta√ß√£o se n√£o existir
        export_dir = "exports"
        if not os.path.exists(export_dir):
            os.makedirs(export_dir)
        
        # Gerar nome do arquivo se n√£o fornecido
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"analysis_export_{timestamp}.xlsx"
        
        filepath = os.path.join(export_dir, filename)
        
        # Preparar dados para exporta√ß√£o
        export_data = []
        for result in results:
            row = {
                'Filename': result.get('filename', 'N/A'),
                'Overall Score (%)': round(result.get('overall_score', 0), 2),
                'Semantic Similarity (%)': round(result.get('semantic_similarity', 0), 2),
                'Skills Match (%)': round(result.get('skills_match', 0), 2),
                'Experience Match (%)': round(result.get('experience_match', 0), 2),
                'Education Match (%)': round(result.get('education_match', 0), 2),
                'Soft Skills Match (%)': round(result.get('soft_skills_match', 0), 2),
                'Resume Skills': ', '.join(result.get('resume_skills', [])),
                'Job Skills': ', '.join(result.get('job_skills', [])),
                'Strengths': '; '.join(result.get('strengths', [])),
                'Weaknesses': '; '.join(result.get('weaknesses', [])),
                'Recommendations': '; '.join(result.get('recommendations', [])),
                'Analysis Timestamp': result.get('analysis_timestamp', 'N/A')
            }
            export_data.append(row)
        
        # Criar DataFrame e exportar
        df = pd.DataFrame(export_data)
        df.to_excel(filepath, index=False, engine='openpyxl')
        
        logger.info(f"Resultados exportados para: {filepath}")
        return filepath
        
    except Exception as e:
        logger.error(f"Erro ao exportar resultados: {str(e)}")
        raise

def format_score(score: float) -> str:
    """
    Formata score para exibi√ß√£o
    
    Args:
        score: Score num√©rico
        
    Returns:
        Score formatado
    """
    if score >= 80:
        return f"üéØ {score:.1f}% (Excelente)"
    elif score >= 60:
        return f"‚úÖ {score:.1f}% (Bom)"
    elif score >= 40:
        return f"‚ö†Ô∏è {score:.1f}% (Moderado)"
    else:
        return f"‚ùå {score:.1f}% (Baixo)"

def get_score_color(score: float) -> str:
    """
    Retorna cor baseada no score
    
    Args:
        score: Score num√©rico
        
    Returns:
        C√≥digo de cor
    """
    if score >= 80:
        return "#28a745"  # Verde
    elif score >= 60:
        return "#ffc107"  # Amarelo
    elif score >= 40:
        return "#fd7e14"  # Laranja
    else:
        return "#dc3545"  # Vermelho

def validate_file_format(filename: str) -> bool:
    """
    Valida formato de arquivo
    
    Args:
        filename: Nome do arquivo
        
    Returns:
        True se formato v√°lido
    """
    allowed_extensions = ['.pdf', '.docx', '.txt']
    return any(filename.lower().endswith(ext) for ext in allowed_extensions)

def get_file_size_mb(file) -> float:
    """
    Obt√©m tamanho do arquivo em MB
    
    Args:
        file: Arquivo
        
    Returns:
        Tamanho em MB
    """
    try:
        # Salvar posi√ß√£o atual
        current_pos = file.tell()
        
        # Ir para o final para obter tamanho
        file.seek(0, 2)
        size_bytes = file.tell()
        
        # Voltar para posi√ß√£o original
        file.seek(current_pos)
        
        return size_bytes / (1024 * 1024)
        
    except Exception as e:
        logger.error(f"Erro ao obter tamanho do arquivo: {str(e)}")
        return 0.0

def clean_filename(filename: str) -> str:
    """
    Limpa nome de arquivo para uso seguro
    
    Args:
        filename: Nome original
        
    Returns:
        Nome limpo
    """
    # Remover caracteres especiais
    import re
    clean_name = re.sub(r'[^\w\s-]', '', filename)
    
    # Remover espa√ßos extras
    clean_name = re.sub(r'\s+', '_', clean_name)
    
    # Limitar tamanho
    if len(clean_name) > 100:
        clean_name = clean_name[:100]
    
    return clean_name

def create_sample_resume() -> str:
    """
    Cria um curr√≠culo de exemplo para testes
    
    Returns:
        Texto do curr√≠culo de exemplo
    """
    return """
Jo√£o Silva Santos
joao.silva@email.com
(11) 99999-9999
S√£o Paulo, SP

RESUMO PROFISSIONAL
Desenvolvedor Full Stack com 5 anos de experi√™ncia em desenvolvimento web, especializado em Python, JavaScript e React. Experi√™ncia em projetos de e-commerce e aplica√ß√µes empresariais.

EXPERI√äNCIA PROFISSIONAL

Desenvolvedor Full Stack S√™nior
TechCorp - S√£o Paulo, SP
2021 - Presente
‚Ä¢ Desenvolvimento de aplica√ß√µes web usando Python (Django), React e PostgreSQL
‚Ä¢ Lideran√ßa t√©cnica de equipe de 4 desenvolvedores
‚Ä¢ Implementa√ß√£o de arquitetura de microservi√ßos
‚Ä¢ Otimiza√ß√£o de performance e escalabilidade

Desenvolvedor Full Stack Pleno
StartupXYZ - S√£o Paulo, SP
2019 - 2021
‚Ä¢ Desenvolvimento de aplica√ß√µes React e Node.js
‚Ä¢ Integra√ß√£o com APIs REST e GraphQL
‚Ä¢ Trabalho com metodologias √°geis (Scrum)

EDUCA√á√ÉO
Bacharelado em Ci√™ncia da Computa√ß√£o
Universidade de S√£o Paulo (USP)
2015 - 2019

HABILIDADES T√âCNICAS
‚Ä¢ Linguagens: Python, JavaScript, TypeScript, Java
‚Ä¢ Frontend: React, Angular, HTML5, CSS3, Bootstrap
‚Ä¢ Backend: Django, Flask, Node.js, Express
‚Ä¢ Bancos de Dados: PostgreSQL, MySQL, MongoDB
‚Ä¢ Cloud: AWS, Docker, Kubernetes
‚Ä¢ Ferramentas: Git, Jira, Jenkins

IDIOMAS
‚Ä¢ Portugu√™s: Nativo
‚Ä¢ Ingl√™s: Fluente
‚Ä¢ Espanhol: Intermedi√°rio

CERTIFICA√á√ïES
‚Ä¢ AWS Certified Developer Associate
‚Ä¢ Scrum Master Certified (SMC)

PROJETOS DESTACADOS
‚Ä¢ Sistema de E-commerce com 10k+ usu√°rios
‚Ä¢ Plataforma de Gest√£o Empresarial
‚Ä¢ API de Pagamentos Integrada

LINKEDIN: linkedin.com/in/joaosilva
GITHUB: github.com/joaosilva
"""

def create_sample_job_description() -> str:
    """
    Cria uma descri√ß√£o de vaga de exemplo para testes
    
    Returns:
        Descri√ß√£o da vaga de exemplo
    """
    return """
DESENVOLVEDOR FULL STACK SENIOR

Sobre a Empresa:
Somos uma empresa de tecnologia inovadora, focada em solu√ß√µes digitais para o mercado financeiro. Buscamos um desenvolvedor experiente para integrar nossa equipe de desenvolvimento.

Responsabilidades:
‚Ä¢ Desenvolver aplica√ß√µes web escal√°veis e de alta performance
‚Ä¢ Trabalhar com arquitetura de microservi√ßos
‚Ä¢ Liderar projetos t√©cnicos e mentorar desenvolvedores j√∫nior
‚Ä¢ Colaborar com equipes de produto e design
‚Ä¢ Participar de code reviews e defini√ß√£o de padr√µes de desenvolvimento

Requisitos Obrigat√≥rios:
‚Ä¢ 5+ anos de experi√™ncia em desenvolvimento web
‚Ä¢ Conhecimento s√≥lido em Python e JavaScript/TypeScript
‚Ä¢ Experi√™ncia com frameworks React e Django
‚Ä¢ Conhecimento em bancos de dados PostgreSQL
‚Ä¢ Experi√™ncia com AWS e Docker
‚Ä¢ Conhecimento em metodologias √°geis

Diferencial:
‚Ä¢ Experi√™ncia com GraphQL
‚Ä¢ Conhecimento em Kubernetes
‚Ä¢ Experi√™ncia no setor financeiro
‚Ä¢ Certifica√ß√µes AWS

Benef√≠cios:
‚Ä¢ Sal√°rio competitivo
‚Ä¢ Plano de sa√∫de
‚Ä¢ Vale refei√ß√£o
‚Ä¢ Home office h√≠brido
‚Ä¢ Plano de carreira

Localiza√ß√£o: S√£o Paulo, SP
Modelo de Trabalho: H√≠brido
"""

def calculate_statistics(results: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Calcula estat√≠sticas dos resultados
    
    Args:
        results: Lista de resultados
        
    Returns:
        Estat√≠sticas calculadas
    """
    if not results:
        return {}
    
    scores = [r.get('overall_score', 0) for r in results]
    
    stats = {
        'total_analyses': len(results),
        'average_score': sum(scores) / len(scores),
        'max_score': max(scores),
        'min_score': min(scores),
        'high_matches': len([s for s in scores if s >= 80]),
        'good_matches': len([s for s in scores if 60 <= s < 80]),
        'moderate_matches': len([s for s in scores if 40 <= s < 60]),
        'low_matches': len([s for s in scores if s < 40])
    }
    
    return stats

def generate_report(results: List[Dict[str, Any]], job_title: str = "Vaga") -> str:
    """
    Gera relat√≥rio em texto dos resultados
    
    Args:
        results: Lista de resultados
        job_title: T√≠tulo da vaga
        
    Returns:
        Relat√≥rio em texto
    """
    if not results:
        return "Nenhum resultado para gerar relat√≥rio."
    
    stats = calculate_statistics(results)
    
    report = f"""
RELAT√ìRIO DE AN√ÅLISE SEM√ÇNTICA
Vaga: {job_title}
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}

RESUMO EXECUTIVO:
‚Ä¢ Total de curr√≠culos analisados: {stats['total_analyses']}
‚Ä¢ Score m√©dio: {stats['average_score']:.1f}%
‚Ä¢ Melhor score: {stats['max_score']:.1f}%
‚Ä¢ Pior score: {stats['min_score']:.1f}%

DISTRIBUI√á√ÉO POR CATEGORIA:
‚Ä¢ Excelente Match (80-100%): {stats['high_matches']} curr√≠culos
‚Ä¢ Bom Match (60-79%): {stats['good_matches']} curr√≠culos
‚Ä¢ Match Moderado (40-59%): {stats['moderate_matches']} curr√≠culos
‚Ä¢ Match Baixo (0-39%): {stats['low_matches']} curr√≠culos

TOP 5 CANDIDATOS:
"""
    
    # Ordenar por score e pegar top 5
    top_candidates = sorted(results, key=lambda x: x.get('overall_score', 0), reverse=True)[:5]
    
    for i, candidate in enumerate(top_candidates, 1):
        filename = candidate.get('filename', 'N/A')
        score = candidate.get('overall_score', 0)
        report += f"{i}. {filename}: {score:.1f}%\n"
    
    return report 